package main

import (
	"encoding/gob"
	"fmt"

	hplugin "github.com/hashicorp/go-plugin"

	ignitecmd "github.com/ignite/cli/ignite/cmd"
	"github.com/ignite/cli/ignite/services/plugin"
)

func init() {
	gob.Register(plugin.Command{})
	gob.Register(plugin.Hook{})
}

type p struct{}

func (p) Commands() []plugin.Command {
	// TODO: write your command list here
	return []plugin.Command{
		{
			Use:               "<%= Name %>",
			Short:             "Explain what the command is doing...",
			Long:              "Long description goes here...",
			PlaceCommandUnder: "ignite",
			// Examples of subcommands:
			Commands: []plugin.Command{
				{Use: "add"},
				{Use: "list"},
				{Use: "delete"},
			},
		},
	}
}

func (p) Hooks() []plugin.Hook {
	return []plugin.Hook{}
}

func (p) Execute(cmd plugin.Command, args []string) error {
	// TODO: write command execution here
	fmt.Printf("Hello I'm the <%= Name %> plugin!\nargs=%v, with=%v\n", args, cmd.With)

	// This is how the plugin can access the chain:
	c, err := ignitecmd.NewChainWithHomeFlags(cmd.CobraCmd)
	if err != nil {
		return err
	}
	_ = c

	// According to the number of declared commands, you may need a switch:
	switch cmd.Use {
	case "add":
		fmt.Println("Adding stuff...")
	case "list":
		fmt.Println("Listing stuff...")
	case "delete":
		fmt.Println("Deleting stuff...")
	}
	return nil
}

func (p) ExecuteHookPre(hook plugin.Hook, args []string) error {
	switch hook.Name {
	default:
		return fmt.Errorf("hook not defined")
	}
}

func (p) ExecuteHookPost(hook plugin.Hook, args []string) error {
	switch hook.Name {
	default:
		return fmt.Errorf("hook not defined")
	}
}

func (p) ExecuteHookCleanUp(hook plugin.Hook, args []string) error {
	switch hook.Name {
	default:
		return fmt.Errorf("hook not defined")
	}
}

func main() {
	pluginMap := map[string]hplugin.Plugin{
		"<%= Name %>": &plugin.InterfacePlugin{Impl: &p{}},
	}

	hplugin.Serve(&hplugin.ServeConfig{
		HandshakeConfig: plugin.HandshakeConfig(),
		Plugins:         pluginMap,
	})
}
